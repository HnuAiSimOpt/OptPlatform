# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AddModule.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import sys
import re
from enum import Enum, unique
from PyQt5.QtWidgets import QComboBox, QListView, QPushButton, QToolButton
from PublicTool.myMaskWidget import myMaskWidget
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QButtonGroup, QDialog, QDialogButtonBox
from PyQt5.QtCore import pyqtSignal

sys.path.append(os.getcwd())
from ui.main.raw.Ui_procedures import Ui_Procedures
from AnalyzeProcessTemplates.public import TemplateNameEnum
from AnalyzeProcessTemplates.public import *

class SelectMode(QDialog, Ui_Procedures):
    msg = pyqtSignal(str)
    def __init__(self, parent=None):
        super(SelectMode, self).__init__(parent)
        self.setupUi(self)
        self.__correct_ui()
        self.__init_signals()
        self.set_page_info()

    def __correct_ui(self):
        self.setFixedWidth(900)
        self.setFixedHeight(600)
        self.Button_doe.setObjectName(TemplateNameEnum.Template_doe.name)
        self.Button_fit.setObjectName(TemplateNameEnum.Template_fit.name)
        self.Button_opt.setObjectName(TemplateNameEnum.Template_opt.name)
        self.Button_sa.setObjectName(TemplateNameEnum.Template_sa.name)
        # self.Button_robust.setObjectName(TemplateNameEnum.Template_robust.name)
        self.Button_modify.setObjectName(TemplateNameEnum.Template_modify.name)
        self.Button_opt_FECalcuFile.setObjectName(TemplateNameEnum.Template_opt_FE.name)

        self.button_group = QButtonGroup()
        self.button_group.addButton(self.Button_doe)
        self.button_group.addButton(self.Button_fit)
        self.button_group.addButton(self.Button_opt)
        self.button_group.addButton(self.Button_sa)
        # self.button_group.addButton(self.Button_robust)
        self.button_group.addButton(self.Button_modify)
        self.button_group.addButton(self.Button_opt_FECalcuFile)
        self.Button_opt_FECalcuFile.setChecked(True)

        # self.setStyleSheet('QDialog#Procedures{background-color: #535353;}')
        for btn in self.findChildren(QToolButton):
            btn.setStyleSheet(getQToolButtonStyleSheet())
        self.stackedWidget.setStyleSheet('background-color: #7c7c7c;')
        self.Btn_yes.setStyleSheet(getBtnStyleString())
        self.Btn_cancel.setStyleSheet(getBtnStyleString())
        qcomboboxList = self.findChildren(QComboBox)
        for cbb in qcomboboxList:
            cbb.setView(QListView())

    def __init_signals(self):
        self.Button_doe.clicked.connect(self.set_page_info)
        self.Button_fit.clicked.connect(self.set_page_info)
        self.Button_opt.clicked.connect(self.set_page_info)
        self.Button_sa.clicked.connect(self.set_page_info)
        # self.Button_robust.clicked.connect(self.set_page_info)
        self.Button_modify.clicked.connect(self.set_page_info)
        self.Button_opt_FECalcuFile.clicked.connect(self.set_page_info)
        self.Btn_yes.clicked.connect(self.slotYesBtnClicked)
        self.Btn_cancel.clicked.connect(self.slotCancelBtnClicked)
        
    def set_page_info(self):
        """设置对话框信息

        会根据项目存在的内容，自适应调整显示信息，提供默认的设置信息
        """
        if self.Button_doe.isChecked():
            self.stackedWidget.setCurrentWidget(self.page_doe)
        elif self.Button_fit.isChecked():
            self.stackedWidget.setCurrentWidget(self.page_fit)
        elif self.Button_sa.isChecked():
            self.stackedWidget.setCurrentWidget(self.page_sa)
        elif self.Button_opt.isChecked():
            self.stackedWidget.setCurrentWidget(self.page_opt_data)
        # elif self.Button_robust.isChecked():
        #     self.stackedWidget.setCurrentIndex(4)
        elif self.Button_opt_FECalcuFile.isChecked():
            self.stackedWidget.setCurrentWidget(self.page_opt_cae)
        elif self.Button_modify.isChecked():
            self.stackedWidget.setCurrentWidget(self.page_custom)
    
    def get_current_procedure_type(self):
        templateName = self.button_group.checkedButton().objectName()
        if templateName in TemplateNameEnum.__members__:
           return TemplateNameEnum[templateName].value
        else:
            return -1

    def slotYesBtnClicked(self):
        tempName = self.get_current_procedure_type()
        if tempName != -1:
            self.msg.emit(tempName)
        return self.done(1)

    def slotCancelBtnClicked(self):
        parent = self.parent()
        while not isinstance(parent, myMaskWidget):
            parent = parent.parent()
        parent.close()
        return self.done(0)



